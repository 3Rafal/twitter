services:
  # PostgreSQL database
  db:
    image: postgres:16-alpine
    container_name: twitter_clone_db
    environment:
      POSTGRES_DB: twitter_clone
      POSTGRES_USER: twitter_user
      POSTGRES_PASSWORD: twitter_pass_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U twitter_user -d twitter_clone"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - twitter_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: twitter_clone_backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - ConnectionStrings__DefaultConnection=Host=db;Database=twitter_clone;Username=twitter_user;Password=twitter_pass_123
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend/appsettings.json:/app/appsettings.json
      - ./backend/appsettings.Development.json:/app/appsettings.Development.json
    restart: unless-stopped
    networks:
      - twitter_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: twitter_clone_frontend
    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - twitter_network

volumes:
  postgres_data:
    driver: local

networks:
  twitter_network:
    driver: bridge